#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π dashboard - —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Samsara + Excel
"""

import streamlit as st
import pandas as pd
import requests
import io
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SAMSARA_API_TOKEN = os.getenv('SAMSARA_API_TOKEN', '')
SAMSARA_BASE_URL = 'https://api.samsara.com'
EXCEL_URL = 'https://docs.google.com/spreadsheets/d/1QuHCNW8lJ5p6uYx1cvAP70u41l0KIjepxGIgZMr_xeg/export?format=csv&gid=1266601948'

st.set_page_config(
    page_title="üöõ Fleet Dashboard", 
    layout="wide"
)

def get_samsara_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¢–° –∏–∑ Samsara"""
    try:
        url = f"{SAMSARA_BASE_URL}/fleet/vehicles/stats"
        headers = {
            'Authorization': f'Bearer {SAMSARA_API_TOKEN}',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
        params = {
            'types': 'obdOdometerMeters,gpsDistanceMeters',
            'limit': 100
        }
        
        response = requests.get(url, headers=headers, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('data', [])
        else:
            st.error(f"–û—à–∏–±–∫–∞ Samsara API: {response.status_code}")
            return []
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Samsara: {e}")
        return []

def get_excel_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel"""
    try:
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(EXCEL_URL, headers=headers, timeout=10)
        
        if response.status_code == 200:
            df = pd.read_csv(io.StringIO(response.text))
            return clean_excel_data(df)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {response.status_code}")
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ Excel: {e}")
        return pd.DataFrame()

def clean_excel_data(df):
    """–û—á–∏—â–∞–µ—Ç Excel –¥–∞–Ω–Ω—ã–µ"""
    if df.empty:
        return df
    
    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –µ—Å–ª–∏ Unnamed
    if df.columns[0].startswith('Unnamed'):
        df = df.iloc[:, 1:]
    
    # –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    filters_to_remove = ['OLD', 'DKD', 'GNS', 'SOLD']
    first_col = df.columns[0]
    
    for filter_val in filters_to_remove:
        df = df[df[first_col] != filter_val]
    
    # –û–±—Ä–µ–∑–∞–µ–º –ø–æ—Å–ª–µ VIN
    vin_index = None
    for i, col in enumerate(df.columns):
        if 'VIN' in str(col).upper():
            vin_index = i
            break
    
    if vin_index is not None:
        df = df.iloc[:, :vin_index + 1]
    
    return df

def process_combined_data(samsara_data, excel_df):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ Samsara –∏ Excel, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
    if not samsara_data or excel_df.empty:
        return pd.DataFrame()
    
    combined_data = []
    
    for vehicle in samsara_data:
        # –î–∞–Ω–Ω—ã–µ –∏–∑ Samsara
        vehicle_id = vehicle.get('id', '')
        vehicle_name = vehicle.get('name', '')
        
        # VIN –∏–∑ Samsara
        samsara_vin = vehicle.get('externalIds', {}).get('samsara.vin', '')
        serial = vehicle.get('externalIds', {}).get('samsara.serial', '')
        
        # –ü—Ä–æ–±–µ–≥ –∏–∑ Samsara
        obd_data = vehicle.get('obdOdometerMeters', {})
        obd_miles = round((obd_data.get('value', 0) / 1609.34), 0) if obd_data.get('value') else 0
        obd_time = obd_data.get('time', '') if obd_data else ''
        
        gps_data = vehicle.get('gpsDistanceMeters', {})
        gps_miles = round((gps_data.get('value', 0) / 1609.34), 0) if gps_data.get('value') else 0
        gps_time = gps_data.get('time', '') if gps_data else ''
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ Excel –ø–æ ID –∏–ª–∏ VIN
        excel_match = find_excel_match(vehicle_name, samsara_vin, excel_df)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ Excel
        if excel_match is not None:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
            excel_data = extract_excel_data(excel_match, excel_df)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
            annual_days = calculate_days_remaining(excel_data.get('annual_date'))
            pm_days = calculate_days_remaining(excel_data.get('pm_date'))
            pm_insp_days = calculate_days_remaining(excel_data.get('pm_insp_date'))
            
            combined_info = {
                'Vehicle_ID': vehicle_id,
                'Vehicle_Name': vehicle_name,
                'VIN': samsara_vin,
                'Serial': serial,
                'OBD_Odometer_Miles': int(obd_miles),
                'GPS_Distance_Miles': int(gps_miles),
                'OBD_Last_Update': obd_time,
                'GPS_Last_Update': gps_time,
                'Status': excel_data.get('status', ''),
                'Annual_Date': excel_data.get('annual_date', ''),
                'Annual_Days_Remaining': annual_days,
                'PM_Date': excel_data.get('pm_date', ''),
                'PM_Days_Remaining': pm_days,
                'PM_Insp_Date': excel_data.get('pm_insp_date', ''),
                'PM_Insp_Days_Remaining': pm_insp_days,
                'Annual_Alert': get_alert_status(annual_days),
                'PM_Alert': get_alert_status(pm_days),
                'PM_Insp_Alert': get_alert_status(pm_insp_days)
            }
            combined_data.append(combined_info)
    
    return pd.DataFrame(combined_data)

def find_excel_match(vehicle_name, samsara_vin, excel_df):
    """–ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ Excel –ø–æ ID –∏–ª–∏ VIN"""
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –¢–° (ID)
    for col in excel_df.columns:
        if 'TRUCK' in str(col).upper() or 'ID' in str(col).upper():
            matches = excel_df[excel_df[col].astype(str) == str(vehicle_name)]
            if not matches.empty:
                return matches.index[0]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ VIN
    if samsara_vin:
        for col in excel_df.columns:
            if 'VIN' in str(col).upper():
                matches = excel_df[excel_df[col].astype(str) == str(samsara_vin)]
                if not matches.empty:
                    return matches.index[0]
    
    return None

def extract_excel_data(row_index, excel_df):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ Excel"""
    row = excel_df.iloc[row_index]
    
    excel_data = {
        'status': '',
        'annual_date': '',
        'pm_date': '',
        'pm_insp_date': ''
    }
    
    # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    for col in excel_df.columns:
        col_upper = str(col).upper()
        
        if 'STATUS' in col_upper:
            excel_data['status'] = str(row[col]) if pd.notna(row[col]) else ''
        elif 'ANNUAL' in col_upper:
            excel_data['annual_date'] = str(row[col]) if pd.notna(row[col]) else ''
        elif 'PM' in col_upper and 'DATE' in col_upper:
            excel_data['pm_date'] = str(row[col]) if pd.notna(row[col]) else ''
        elif 'PM' in col_upper and 'INSP' in col_upper:
            excel_data['pm_insp_date'] = str(row[col]) if pd.notna(row[col]) else ''
    
    return excel_data

def calculate_days_remaining(date_value):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–æ –¥–∞—Ç—ã"""
    if not date_value or date_value == '' or pd.isna(date_value):
        return None
    
    try:
        date_formats = ['%m/%d/%Y', '%Y-%m-%d', '%d.%m.%Y', '%m-%d-%Y']
        
        for fmt in date_formats:
            try:
                target_date = datetime.strptime(str(date_value), fmt)
                today = datetime.now()
                return (target_date - today).days
            except ValueError:
                continue
        
        return None
    except:
        return None

def get_alert_status(days_remaining):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞"""
    if days_remaining is None:
        return "No Data"
    elif days_remaining < 0:
        return "OVERDUE"
    elif days_remaining <= 30:
        return "CRITICAL"
    elif days_remaining <= 60:
        return "WARNING"
    else:
        return "OK"

def main():
    st.title("üöõ Fleet Dashboard - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not SAMSARA_API_TOKEN:
        st.error("‚ùå Samsara API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ SAMSARA_API_TOKEN –≤ .env —Ñ–∞–π–ª")
        return
    
    if st.button("üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–ª–æ—Ç–∞", use_container_width=True):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            samsara_data = get_samsara_stats()
            excel_df = get_excel_data()
            
            if samsara_data and not excel_df.empty:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                combined_df = process_combined_data(samsara_data, excel_df)
                
                if not combined_df.empty:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(combined_df)} –¢–° —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                    st.subheader("üìã –§–ª–æ—Ç —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                    st.dataframe(combined_df, use_container_width=True)
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
                    st.subheader("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã")
                    
                    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                    overdue_annual = combined_df[combined_df['Annual_Alert'] == 'OVERDUE']
                    overdue_pm = combined_df[combined_df['PM_Alert'] == 'OVERDUE']
                    
                    if not overdue_annual.empty:
                        st.error(f"‚ùå {len(overdue_annual)} –¢–° —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π Annual –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
                        st.dataframe(overdue_annual[['Vehicle_Name', 'Annual_Date', 'Annual_Days_Remaining']])
                    
                    if not overdue_pm.empty:
                        st.error(f"‚ùå {len(overdue_pm)} –¢–° —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º PM")
                        st.dataframe(overdue_pm[['Vehicle_Name', 'PM_Date', 'PM_Days_Remaining']])
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
                    critical_annual = combined_df[combined_df['Annual_Alert'] == 'CRITICAL']
                    critical_pm = combined_df[combined_df['PM_Alert'] == 'CRITICAL']
                    
                    if not critical_annual.empty:
                        st.warning(f"‚ö†Ô∏è {len(critical_annual)} –¢–° —Ç—Ä–µ–±—É—é—Ç Annual –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π")
                        st.dataframe(critical_annual[['Vehicle_Name', 'Annual_Date', 'Annual_Days_Remaining']])
                    
                    if not critical_pm.empty:
                        st.warning(f"‚ö†Ô∏è {len(critical_pm)} –¢–° —Ç—Ä–µ–±—É—é—Ç PM –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π")
                        st.dataframe(critical_pm[['Vehicle_Name', 'PM_Date', 'PM_Days_Remaining']])
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("–í—Å–µ–≥–æ –¢–°", len(combined_df))
                    
                    with col2:
                        annual_ok = len(combined_df[combined_df['Annual_Alert'] == 'OK'])
                        st.metric("Annual OK", annual_ok)
                    
                    with col3:
                        pm_ok = len(combined_df[combined_df['PM_Alert'] == 'OK'])
                        st.metric("PM OK", pm_ok)
                    
                    with col4:
                        avg_miles = combined_df['OBD_Odometer_Miles'].mean()
                        st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–≥", f"{avg_miles:,.0f} –º–∏–ª—å")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    combined_df.to_csv('fleet_dashboard_data.csv', index=False)
                    st.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'fleet_dashboard_data.csv'")
                    
                else:
                    st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–µ–∂–¥—É Samsara –∏ Excel –¥–∞–Ω–Ω—ã–º–∏")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main()
